#include <iostream>

using namespace std;

struct node
{
    int data;
    struct node *prev;
    struct node *next;
}*head,*tail;


void InsAtBeg(int num)
{
    struct node *temp;
  temp=new node;
  temp->data=num;


  if(head==NULL && tail==NULL)
  {
      temp->next=NULL;
      temp->prev=NULL;
      head=temp;
      tail=temp;
  }
  else{
        temp->prev=NULL;
        temp->next=head;
        head->prev=temp;
        head=temp;


  }

  }

  void InsAtEnd(int num)
  {
      struct node *temp,*r;
  temp=new node;
  temp->data=num;
r=tail;

  if(head==NULL && tail==NULL)
  {
      temp->next=NULL;
      temp->prev=NULL;
      head=temp;
      tail=temp;
  }
  else{
       temp->prev=tail;
       temp->next=NULL;
       r->next=temp;
       tail=temp;


  }

  }

void InsAfterPos(int num,int pos)
  {
struct node *temp,*r;
  temp=new node;
  temp->data=num;
  r=head;

  if(head==NULL && tail==NULL)
  {
      temp->prev=tail;
       temp->next=NULL;
       r->next=temp;
       tail=temp;
  }
  else{
while(r!=NULL)
{
if(r->data==pos)
           {
            temp->prev=r;
           temp->next=r->next;
           if(r->next!=NULL)

           r->next->prev=temp;
           r->next=temp;
           return;
           }
           r=r->next;

  }

  }
  }

  void DelAtBeg()
  {
struct node *temp,*r;
  temp=new node;
  r=head;
  if(head->next==NULL)
  {
      head=NULL;
      tail=NULL;
      delete(r);
      return;
  }
  else{
    r->next->prev=NULL;
    head=r->next;
    delete(r);
  }

  }

 void DelAtEnd()
  {

struct node *temp,*r;
  temp=new node;
  r=tail;
  if(tail->prev==NULL)
  {
      head=NULL;
      tail=NULL;
      delete(r);
      return;
  }
  else{
    r->prev->next=NULL;
    tail=r->prev;
    delete(r);
  }


  }

  void DelAtPos(int num)
  {

struct node *r1,*r2;
      r1=head;
      r2=head->next;
      if(head==NULL && tail==NULL)
      {
          cout<<"\nLinked list is empty.";
          return;
      }
      else if(r1->next==NULL)
      {
          head=NULL;
          tail=NULL;
          delete(r1);
      }
      else
      {
          while(r1->data!=num)
          {
              r1=r1->next;
              r2=r2->next;
          }
          (r1->prev)->next=r1->next;
          r2->prev=r1->prev;
          delete(r1);
      }
  }
 void ElementCount()
  {
      struct node *r;
   r=head;
   int count=0;
   while(r!=NULL)
   {
       count++;
      r=r->next;
   }
   cout<<"\nNumber of Elements="<<count;
  }

  void Searching(int num)
  {
struct node *r;
  int flag=0;
  r=head;
  while(r!=NULL)
  {
     if(r->data==num)
     {
        flag=1;
        break;
     }
     r=r->next;

  }
  if(flag==1)
  {
      cout<<"\nElement exist in LinkedList. ";
  }
  else{
     cout<<"\nElement does not exist in LinkedList. ";
  }



  }






  void frwdDisplay()
  {
      struct node *r;
      r=head;
      if(head==NULL && tail==NULL)
      {
          cout<<"\nLinked list is empty.";
          return;
      }
      else{
        while(r!=NULL)
        {
            cout<<r->data<<"\n";
            r=r->next;
        }
      }
  }
  void bkwdDisplay()
  {
      struct node *r;
      r=tail;
      if(head==NULL && tail==NULL)
      {
          cout<<"\nLinked list is empty.";
          return;
      }
      else{
        while(r!=NULL)
        {
            cout<<r->data<<"\n";
            r=r->prev;
        }
      }
  }


int main()
{
    int choice;
while(1){
    cout<<"\n-----------------------Menu-------------------------------";
    cout<<"\n 1.Insertion at beginning";
    cout<<"\n 2.Insertion at End";
    cout<<"\n 3. Insertion at given Location";
    cout<<"\n 4. Deletion at beginning";
    cout<<"\n 5. Deletion at End";
    cout<<"\n 6. Deletion of Specific value";
    cout<<"\n 7.Count the no. of Element";
    cout<<"\n 8.Searching of specific element in DoublyLinkedList";
    cout<<"\n 9. ForwardDisplay";
    cout<<"\n 10. BackwardDisplay";
    cout<<"\n Enter Choice:";
    cin>>choice;
    switch(choice)
    {
    case 1:
        {
            int num;
            cout<<"Enter Number:";
            cin>>num;
            InsAtBeg(num);
            break;
        }
        case 2:
        {
            int num;
            cout<<"Enter Number:";
              cin>>num;
            InsAtEnd(num);
            break;
        }
        case 3:
        {
            int num,pos;
            cout<<"Enter Number:";
              cin>>num;
              cout<<"Enter Position:";
              cin>>pos;
            InsAfterPos(num,pos);
            break;
        }
        case 4:
        {
            DelAtBeg();
            break;
        }
        case 5:
        {
            DelAtEnd();
            break;
        }
        case 6:
        {
            int num;
      cout<<"Enter the value u want to delete:";
              cin>>num;
            DelAtPos(num);
            break;
        }
        case 7:
        {
            ElementCount();
            break;
        }
        case 8:
        {
            int num;
            cout<<" Enter the value u want to Search:";
            cin>>num;
            Searching(num);
            break;
        }
        case 9:
        {
            frwdDisplay();
            break;
        }
        case 10:
        {
            bkwdDisplay();
            break;
        }
    }
}

}





